{"version":3,"sources":["../main.js"],"names":["calculate","Waypoint","latitude","longitude","value","id","incrementID","latestID","Edge","from","to","distance","calculateHaversine","radius","toRadians","degrees","Math","PI","dLatitude","dLongitude","latitude1","latitude2","a","sin","cos","c","atan2","sqrt","filters","Object","keys","every","key","Path","waypoints","paths","getWaypointCombinations","input","mask","results","total","pow","length","result","i","push","some","waypoint","filteredWaypoints","filter","console","time","combinations","timeEnd","forEach","path","accumulatedValue","accumulatedDistance","sort","b","edge"],"mappings":"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","file":"main.js","sourcesContent":["export class Waypoint {\r\n  constructor(latitude, longitude, value) {\r\n    this.id = Waypoint.incrementID();\r\n    this.latitude = latitude;\r\n    this.longitude = longitude;\r\n    this.value = value;\r\n  }\r\n\r\n  static incrementID() {\r\n    if (!this.latestID) {\r\n      this.latestID = 1;\r\n    } else {\r\n      this.latestID++;\r\n    }\r\n\r\n    return this.latestID;\r\n  }\r\n}\r\n\r\nexport class Edge {\r\n  constructor(from, to) {\r\n    this.from = from;\r\n    this.to = to;\r\n    this.distance = this.calculateHaversine();\r\n  }\r\n\r\n  calculateHaversine() {\r\n    const radius = 6371;\r\n    const toRadians = function(degrees) {\r\n      return degrees * Math.PI / 180;\r\n    };\r\n    const dLatitude = toRadians(this.to.latitude - this.from.latitude);\r\n    const dLongitude = toRadians(this.to.longitude - this.from.longitude);\r\n    const latitude1 = toRadians(this.from.latitude);\r\n    const latitude2 = toRadians(this.to.latitude);\r\n    const a = Math.sin(dLatitude / 2) *\r\n        Math.sin(dLatitude / 2) +\r\n        Math.sin(dLongitude / 2) *\r\n        Math.sin(dLongitude / 2) *\r\n        Math.cos(latitude1) *\r\n        Math.cos(latitude2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return radius * c;\r\n  }\r\n\r\n  filter(filters) {\r\n    return Object.keys(filters).every(key => {\r\n      return filters[key](this[key]);\r\n    });\r\n  }\r\n}\r\n\r\nexport class Path {\r\n  constructor(value, distance, waypoints) {\r\n    this.value = value;\r\n    this.distance = distance;\r\n    this.waypoints = waypoints;\r\n  }\r\n\r\n  filter(filters) {\r\n    return Object.keys(filters).every(key => {\r\n      return filters[key](this[key]);\r\n    });\r\n  }\r\n}\r\n\r\nexport function calculate(waypoints, filters) {\r\n  let paths = [];\r\n\r\n  const getWaypointCombinations = function(input) {\r\n    let mask, results = [], total = Math.pow(2, input.length);\r\n\r\n    for (mask = 1; mask < total; mask++) {\r\n      let result = [];\r\n      let i = input.length - 1;\r\n\r\n      do {\r\n        if ((mask & (1 << i)) !== 0) {\r\n          result.push(input[i]);\r\n        }\r\n      } while (i--);\r\n\r\n      if (result.length >= 2 && result.some(waypoint => waypoint.id === 1)) {\r\n        results.push(result);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  };\r\n\r\n  let filteredWaypoints = waypoints.filter(waypoint => {\r\n    return new Edge(waypoints[0], waypoint).filter(filters);\r\n  });\r\n\r\n  console.time('getWaypointCombinations');\r\n  let combinations = getWaypointCombinations(filteredWaypoints);\r\n  console.timeEnd('getWaypointCombinations');\r\n\r\n  combinations.forEach(waypoints => {\r\n    let path;\r\n    let accumulatedValue = 0;\r\n    let accumulatedDistance = 0;\r\n\r\n    waypoints.sort((a, b) => a.id - b.id);\r\n\r\n    for (let i = 1; i < waypoints.length; i++) {\r\n      let edge = new Edge(waypoints[i - 1], waypoints[i]);\r\n      accumulatedValue += waypoints[i].value;\r\n      accumulatedDistance += edge.distance;\r\n    }\r\n\r\n    path = new Path(accumulatedValue, accumulatedDistance, waypoints);\r\n\r\n    if (path.filter(filters)) {\r\n      paths.push(path);\r\n    }\r\n  });\r\n\r\n  paths.sort((a, b) => b.value - a.value);\r\n\r\n  return paths;\r\n}\r\n\r\nexport default {\r\n  Waypoint,\r\n  Edge,\r\n  Path,\r\n  calculate,\r\n};"]}